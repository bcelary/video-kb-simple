[project]
name = "video-kb-simple"
version = "0.1.0"
description = "A CLI tool to download and extract transcribed text from videos using yt-dlp"
readme = "README.md"
authors = [{ name = "Your Name", email = "your.email@example.com" }]
license = { text = "MIT" }
requires-python = ">=3.11"
keywords = ["cli", "video", "transcription", "yt-dlp", "knowledge-base"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Video",
    "Topic :: Text Processing",
]

dependencies = [
    "typer >= 0.12.0",
    "yt-dlp[curl-cffi] >= 2024.1.0",
    "rich >= 13.7.0",
    "pydantic >= 2.5.0",
    "python-slugify>=8.0.4",
]

[project.optional-dependencies]
dev = [
    "pytest >= 8.4.0",
    "pytest-cov >= 6.0.0",
    "ruff >= 0.11.12",
    "mypy >= 1.8.0",
    "bandit[toml] >= 1.7.10",
    "pre-commit >= 4.2.0",
    "types-requests",
]

[project.scripts]
video-kb = "video_kb_simple.__main__:main"

[project.urls]
Homepage = "https://github.com/yourusername/video-kb-simple"
Repository = "https://github.com/yourusername/video-kb-simple"
Issues = "https://github.com/yourusername/video-kb-simple/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # ruff specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=video_kb_simple",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["video_kb_simple"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
skips = ["B101", "B601"]
exclude_dirs = ["tests"]
